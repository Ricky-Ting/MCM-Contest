#include<iostream>
#include<fstream>
#include<string>

#define KY_start 0
#define OH_start 120
#define PA_start 120+88
#define VA_start 120+88+67
#define WV_start 120+88+67+131


//#define OUTPUT_DRUG_COUNTS
//#define OUTPUT_REAL_COUNT
//#define OUTPUT_CA_COUNT

using namespace std;

string s[500];  						// store the name of counties
int county_count[10][500];	// store the number of drug reports of different counties in 2010-2017
int result[10][500];		// store the results simulated by CA.
int State_count[10][5];		// strore the number of drug reports of different state in 2010-2017
int name_counter;			// store the number of counties
double factor[10][20][500];		//factor[year][VA][county]
const string State_name[] = {"KY", "OH", "PA", "VA", "WV"  };
struct{ 
	int rel_name;		// the number of adjacent counties
	int adj[20];		
} relations[500] ;

/* following are file operator  */
ifstream names;
ifstream count_year;
ifstream county_relation;
ifstream factorfile;
ofstream ca_count;
ofstream real_count;

/* following are functions declaration*/
void get_name(void); 
void get_count(void);
void get_relation(void);
void get_data(void);
void CA(void);
void output(void);

void get_max_min(void);    int count_max,count_min;

int main() {
	names.open("COUNTY_NAMES.txt");
	count_year.open("DRUG_COUNTS.txt");
	county_relation.open("NEW_COUNTY_RELATION.txt");
	ca_count.open("CA_RESULTS.txt");
	real_count.open("REAL_RESULTS.txt");
	factorfile.open("DATA.txt");


	factor1.open("balabala");
	factor2.open("balabala");
	factor3.open("balabala");
	factor4.open("balabala");
	factor5.open("balabala");
	factor6.open("balabala");

	get_name();
	get_count();
	get_relation();
//	CA();
	output();


	names.close();
	count_year.close();
	county_relation.close();
	ca_count.close();
	real_count.close();

	factorfile.close();

}


void get_name(void) {
	name_counter=0;
	while(names>>s[name_counter]) {
		name_counter++;
	}
	cout<<"In get_name(), get "<<name_counter<<" county names"<<endl;
	return ;
}

void get_count(void) {
	memset(county_count,0,sizeof(county_count));
	int Inyear,Incounty_count;
	string InState, Incounty;
	int herestart;
	while( count_year >> Inyear >> InState >> Incounty >> Incounty_count  ) {
		
	//	cout<<Inyear<<InState<<Incounty<<Incounty_count<<endl;
		switch(InState[0]) {
			case 'K' : herestart=KY_start; break;
			case 'O' : herestart=OH_start; break;
			case 'P' : herestart=PA_start; break;
			case 'V' : herestart=VA_start; break;
			case 'W' : herestart=WV_start; break;				default : cout<<"Error\n"<<endl; break;	
		}
		for(int i=herestart; i<name_counter;i++ ) {
			if(s[i]==Incounty) {
				county_count[Inyear%2010][i]+= Incounty_count;
				break;
			
			}
			if(i==name_counter-1)
				cout<<"In get_count, Error\n";
		
		}
	}
	memset(State_count,0,sizeof(State_count));
	for(int i=2010;i<=2017;i++) {
		for(int j=KY_start;j<OH_start;j++) 
			State_count[i%2010][0]+=county_count[i%2010][j];
		for(int j=OH_start;j<PA_start;j++) 
			State_count[i%2010][1]+=county_count[i%2010][j];
		for(int j=PA_start;j<VA_start;j++) 
			State_count[i%2010][2]+=county_count[i%2010][j];
		for(int j=VA_start;j<WV_start;j++) 
			State_count[i%2010][3]+=county_count[i%2010][j];
		for(int j=WV_start;j<name_counter;j++) 
			State_count[i%2010][4]+=county_count[i%2010][j];
	}
}

void get_relation() {
	string In_county;
	int rel;
	for(int i=0;i<name_counter;i++) {
		relations[i].rel_name=0;
		county_relation>>In_county;
		while(county_relation>>rel) {
			if(rel==-1)
				break;
			relations[i].adj[relations[i].rel_name]=rel-1;
			relations[i].rel_name++;
		}
	}
}


void get_data() {

}


void CA() {
/*	
	for(int i=0;i<name_counter;i++)
		results[2010%2010][i] = county_count[2010%2010][i];

	for(int i=2010;i<2017;i++)  {
		
		for(int j=0;j<name_counter;j++) {
			results[ (i+1)%2010][j] =  update(results[i%2010][j]);
		
		}

	}
	
	*/
}



void output() {
	
#ifdef OUTPUT_DRUG_COUNTS
	for(int i=2010;i<=2017;i++) {
		cout<<i<<"\t"<<"KY\t"<<State_count[i%2010][0]<<endl;
		cout<<i<<"\t"<<"OH\t"<<State_count[i%2010][1]<<endl;
		cout<<i<<"\t"<<"PA\t"<<State_count[i%2010][2]<<endl;
		cout<<i<<"\t"<<"VA\t"<<State_count[i%2010][3]<<endl;
		cout<<i<<"\t"<<"WV\t"<<State_count[i%2010][4]<<endl;

	}
	for(int i=2010;i<=2017;i++) {
		for(int j=0;j<name_counter;j++) {
			cout<< i<< "\t" ;
			if(j<OH_start) 
				cout<<"KY"<<"\t";
			else if(j<PA_start)
				cout<<"OH"<<"\t";
			else if(j<VA_start)
				cout<<"PA"<<"\t";
			else if(j<WV_start)
				cout<<"VA"<<"\t";
			else
				cout<<"WV"<<"\t";
			cout<< s[j]<<"\t"<<county_count[i%2010][j]<<endl;
		} 
	}
#endif 

#ifdef OUTPUT_REAL_COUNT

	

#endif
}


void get_max_min(void) {
	count_max=INF;
	count_min=-INF;
	for(int i=2010;i<=2016;i++) {
		for(int j=0;j<name_counter;j++) {
			count_max=(county_count[i%2010][j]>count_max)?county_count[i%2010][j]:count_max;
			count_min=(county_count[i%2010][j]<count_min)?county_count[i%2010][j]:count_min;


		
		}
	}

}









